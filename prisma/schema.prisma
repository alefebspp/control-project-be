// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum HourRecordType {
  ADDITIONAL
  PENDING
}

model HourRecord {
  id              String         @id
  type            HourRecordType
  seconds         Int
  registry_type   String
  collaborator_id String
  registry_id     String
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt

  collaborator Collaborator @relation(fields: [collaborator_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  registry     Registry     @relation(fields: [registry_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("hour_record")
}

model Registry {
  id                      String   @id
  date                    DateTime
  start                   String?
  start_location          String?
  interval_start          String?
  interval_start_location String?
  interval_end            String?
  interval_end_location   String?
  end                     String?
  end_location            String?
  collaborator_id         String
  company_id              String?

  adjustment   Adjustment[]
  collaborator Collaborator? @relation(fields: [collaborator_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  company      Company?      @relation(fields: [company_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  HourRecord   HourRecord[]

  @@map("registries")
}

enum StatusType {
  REJECTED
  ACCEPTED
  PENDING
}

model Adjustment {
  id                String     @id
  registry_id       String
  collaborator_id   String
  company_id        String
  status            StatusType @default(PENDING)
  reason            String
  registry_type     String
  new_value         String
  previous_value    String?
  registry_location String?
  new_location      String
  reviewer          String?
  reviewer_response String?
  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt

  registry            Registry?     @relation(fields: [registry_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  company             Company?      @relation(fields: [company_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  collaborator        Collaborator? @relation("CollaboratorAdjustment", fields: [collaborator_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adjustment_reviewer Collaborator? @relation("ReviewerAdjustment", fields: [reviewer], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("adjustments")
}

model Collaborator {
  id             String   @id
  name           String
  avatar         String?
  surname        String
  email          String   @unique
  password       String
  shift_start    String
  shift_end      String
  interval_start String   @default("12:00")
  interval_end   String   @default("13:00")
  company_id     String?
  admin          Boolean  @default(false)
  manager        Boolean  @default(false)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  hours_balance  Int      @default(0)

  registries              Registry[]
  collaborator_adjustment Adjustment[] @relation("CollaboratorAdjustment")
  reviewer_adjustment     Adjustment[] @relation("ReviewerAdjustment")
  company                 Company?     @relation(fields: [company_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  Hours                   HourRecord[]

  @@map("collaborators")
}

model Company {
  id         String   @id
  name       String
  email      String   @unique
  logo       String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  collaborators Collaborator[] @relation()
  registries    Registry[]
  Adjustment    Adjustment[]

  @@map("companies")
}
